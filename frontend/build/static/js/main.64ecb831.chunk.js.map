{"version":3,"sources":["constants/appConstants.js","store.js","reducers/appReducers.js","components/Header.js","components/Footer.js","components/Hospital.js","actions/appActions.js","components/Paginate.js","components/Loader.js","components/Message.js","screens/HomeScreen.js","screens/UserInfoScreen.js","screens/SubmitresultScreen.js","App.js","reportWebVitals.js","index.js"],"names":["HOSPITAL_LIST_REQUEST","HOSPITAL_LIST_SUCCESS","HOSPITAL_LIST_FAIL","ILLNESS_LIST_SUCCESS","ILLNESS_LIST_FAIL","SET_ILLNESS_ITEM","SET_ILLNESS_SEVERITY","SET_HOSPITAL_ITEM","SET_USERFORM_INFO","SAVE_USERINFO_TO_DATABASE_REQUEST","SAVE_USERINFO_TO_DATABASE_SUCCESS","SAVE_USERINFO_TO_DATABASE_FAIL","reducer","combineReducers","hospitalList","state","hospitals","action","type","loading","payload","_embedded","page","pages","totalPages","error","illnessList","illnesses","illnessInfo","illnessId","severityLevel","hospitalId","userformInfo","success","illnessIdFromStorage","localStorage","getItem","JSON","parse","hospitalIdFromStorage","initialState","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Header","Navbar","bg","variant","expand","Container","to","Brand","href","Footer","Row","Col","className","Hospital","hospital","severity","history","console","log","waititem","waitingList","waitingTime","patientCount","averageProcessTime","dispatch","useDispatch","Card","Body","Title","as","name","md","Text","xs","lg","Button","onClick","data","id","setItem","stringify","push","Paginate","Pagination","Array","keys","map","x","Item","active","Loader","Spinner","animation","role","style","height","width","margin","display","Message","children","Alert","HomeScreen","useSelector","illerror","illloading","hoserror","hosloading","hospage","hospages","useState","hospitaldisplay","setHospitaldisplay","setIllnessId","severityId","setSeverityId","illnessname","setIllnessname","useEffect","a","axios","get","response","detail","message","Form","onSubmit","e","preventDefault","saveIllnessseverity","Group","controlId","Label","Control","onChange","target","value","illness","ButtonGroup","aria-label","UserInfoScreen","firstname","setFirstname","lastname","setLastname","email","setEmail","address","setAddress","city","setCity","setState","zip","setZip","userInfo","config","headers","post","placeholder","defaultValue","SubmitresultScreen","handleClick","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64ecb831.chunk.js","sourcesContent":["export const HOSPITAL_LIST_REQUEST='HOSPITAL_LIST_REQUEST'\nexport const HOSPITAL_LIST_SUCCESS='HOSPITAL_LIST_SUCCESS'\nexport const HOSPITAL_LIST_FAIL='HOSPITAL_LIST_FAIL'\n\nexport const ILLNESS_LIST_REQUEST='ILLNESS_LIST_REQUEST'\nexport const ILLNESS_LIST_SUCCESS='ILLNESS_LIST_SUCCESS'\nexport const ILLNESS_LIST_FAIL='ILLNESS_LIST_FAIL'\nexport const SET_ILLNESS_ITEM='SET_ILLNESS_ITEM'\nexport const SET_ILLNESS_SEVERITY='SET_ILLNESS_SEVERITY'\nexport const SET_HOSPITAL_ITEM='SET_HOSPITAL_ITEM'\nexport const SET_USERFORM_INFO='SET_USERFORM_INFO'\n\nexport const SAVE_USERINFO_TO_DATABASE_REQUEST='SAVE_USERINFO_TO_DATABASE_REQUEST'\nexport const SAVE_USERINFO_TO_DATABASE_SUCCESS='SAVE_USERINFO_TO_DATABASE_SUCCESS'\nexport const SAVE_USERINFO_TO_DATABASE_FAIL='SAVE_USERINFO_TO_DATABASE_FAIL'","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { hospitalListReducer,illnessListReducer, illnessInfoReducer} from './reducers/appReducers'\n\n\nconst reducer =combineReducers({\n    hospitalList: hospitalListReducer,\n    illnessList: illnessListReducer,\n    illnessInfo: illnessInfoReducer\n})\n\nconst illnessIdFromStorage = localStorage.getItem('illnessId') ?\n    JSON.parse(localStorage.getItem('illnessId')) : 1\n\nconst hospitalIdFromStorage = localStorage.getItem('hospitalId') ?\n    JSON.parse(localStorage.getItem('hospitalId')) : 1\n\n\nconst severityLevelFromStorage = localStorage.getItem('severityLevel') ?\n    JSON.parse(localStorage.getItem('severityLevel')) : 0\n\nconst userformInfoFromStorage = localStorage.getItem('userformInfo') ?\n    JSON.parse(localStorage.getItem('userformInfo')) : []\n\n\nconst initialState ={\n    illnessInfo: {\n        illnessId: illnessIdFromStorage,\n        severityLevel: severityLevelFromStorage,\n        hospitalId: hospitalIdFromStorage,\n        userformInfo: userformInfoFromStorage,\n    }\n}\nconst middleware=[thunk]\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store","import {\n    HOSPITAL_LIST_REQUEST,\n    HOSPITAL_LIST_SUCCESS,\n    HOSPITAL_LIST_FAIL,\n    ILLNESS_LIST_REQUEST,\n    ILLNESS_LIST_SUCCESS,\n    ILLNESS_LIST_FAIL,\n    SET_ILLNESS_ITEM,\n    SET_ILLNESS_SEVERITY,\n    SET_HOSPITAL_ITEM,\n    SAVE_USERINFO_TO_DATABASE_FAIL,\n    SAVE_USERINFO_TO_DATABASE_REQUEST,\n    SAVE_USERINFO_TO_DATABASE_SUCCESS,\n    SET_USERFORM_INFO,\n\n} from '../constants/appConstants'\n\nexport const hospitalListReducer = (state={hospitals:[]},action) => {\n\n    switch(action.type) {\n        case HOSPITAL_LIST_REQUEST:\n            return {loading:true, hospitals: []}\n        case HOSPITAL_LIST_SUCCESS:\n            return {\n                loading:false, \n                hospitals: action.payload._embedded.hospitals, \n                page: action.payload.page, \n                pages: action.payload.page.totalPages \n            }\n        case HOSPITAL_LIST_FAIL:\n            return { loading: false, error: action.payload }\n\n        default:\n            return state\n    }\n}\n\nexport const illnessListReducer = (state={illnesses:[]},action) => {\n\n    switch(action.type) {\n        case SAVE_USERINFO_TO_DATABASE_REQUEST:\n            return {loading:true, illnesses: []}\n        case ILLNESS_LIST_SUCCESS:\n            return {\n                loading:false, \n                illnesses: action.payload._embedded.illnesses, \n                page: action.payload.page, \n                pages:action.payload.page.totalPages \n            }\n        case ILLNESS_LIST_FAIL:\n            return { loading: false, error: action.payload }\n\n        default:\n            return state\n    }\n}\n\nexport const illnessInfoReducer =(state={ loading:false }, action) => {\n    switch (action.type) {\n        case SET_ILLNESS_ITEM:\n            return{\n                ...state,\n                illnessId: action.payload\n            }\n        case SET_ILLNESS_SEVERITY:\n            return{\n                ...state,\n                severityLevel: action.payload\n            }\n        case SET_HOSPITAL_ITEM:\n            return{\n                ...state,\n                hospitalId: action.payload\n            }\n        case SET_USERFORM_INFO:\n            return{\n                ...state,\n                userformInfo: action.payload\n            }\n        case SAVE_USERINFO_TO_DATABASE_REQUEST:\n            return {\n                    loading:true\n            }\n        case SAVE_USERINFO_TO_DATABASE_SUCCESS:\n            return {\n                    loading: false,\n                    success: true,\n            \n            }\n        case SAVE_USERINFO_TO_DATABASE_FAIL:\n            return {\n                    loading: false,\n                    error: action.payload            \n            }\n        default:\n            return state\n    }\n}\n\n","import React from 'react'\nimport { Navbar, Container} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\n\n\nfunction Header() {\n\n    return (\n        <header>\n           <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand href=\"/\">Hospital Appointment System</Navbar.Brand>\n                    </LinkContainer>\n                </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n\n\nfunction Footer() {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className =\"text-center py-3\"> Copyright &copy; JING\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react'\nimport { useDispatch} from 'react-redux'\nimport { Card ,Row, Col, Button } from 'react-bootstrap'\nimport { saveHospitalitem  } from '../actions/appActions'\n\n\nfunction Hospital({ hospital, severity, history}) {\n    console.log(severity)\n    const waititem=hospital.waitingList[severity]\n    const patientCount=waititem.patientCount\n    const averageProcessTime=waititem.averageProcessTime\n    const waitingTime=patientCount*averageProcessTime\n    const dispatch = useDispatch()\n    const handleSubmit=()=>{\n        console.log('handsubmit')\n        dispatch(saveHospitalitem(hospital.id))\n        history.push('/userInfoForm')\n    }\n    return (\n        <Card className=\"my-3 p-3 rounded\">    \n            <Card.Body>\n                <Row className=\"justify-content-md-center\">\n                    <Col>\n                        <Card.Title as=\"div\">\n                            <strong>{hospital.name}</strong>\n                        </Card.Title>\n                    </Col >\n                    <Col md=\"auto\" >\n                        <Card.Text  as=\"div\" >\n                           <p>Wait time: {waitingTime} mins</p>      \n                        </Card.Text>\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button onClick={handleSubmit}>Choose</Button>\n                    </Col>\n                </Row>\n        \n            </Card.Body>\n      \n        </Card>\n    )\n}\n\nexport default Hospital\n","import axios from 'axios'\nimport {\n    HOSPITAL_LIST_REQUEST,\n    HOSPITAL_LIST_SUCCESS,\n    HOSPITAL_LIST_FAIL,\n    ILLNESS_LIST_REQUEST,\n    ILLNESS_LIST_SUCCESS,\n    ILLNESS_LIST_FAIL,\n    SET_ILLNESS_ITEM,\n    SET_ILLNESS_SEVERITY,\n    SET_HOSPITAL_ITEM,\n    SAVE_USERINFO_TO_DATABASE_FAIL,\n    SAVE_USERINFO_TO_DATABASE_REQUEST,\n    SAVE_USERINFO_TO_DATABASE_SUCCESS,\n    SET_USERFORM_INFO\n\n} from '../constants/appConstants'\n\nexport const listHospitals = () => async (dispatch) => {\n    try {\n        dispatch({type: HOSPITAL_LIST_REQUEST})\n        const {data} = await axios.get(`http://dmmw-api.australiaeast.cloudapp.azure.com:8080/hospitals`)\n        console.log(data)\n        dispatch({\n            type:HOSPITAL_LIST_SUCCESS,\n            payload:data,\n        })\n    }catch(error) {\n        dispatch({\n            type: HOSPITAL_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n        \n    }\n\n}\n\nexport const listIllnesss = () => async (dispatch) => {\n    try {\n        dispatch({type: ILLNESS_LIST_REQUEST})\n        const {data} = await axios.get('http://dmmw-api.australiaeast.cloudapp.azure.com:8080/illnesses')\n        console.log(data)\n        dispatch({\n            type:ILLNESS_LIST_SUCCESS,\n            payload:data,\n        })\n    }catch(error) {\n        console.log(error)\n        dispatch({\n            type: ILLNESS_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n        \n    }\n\n}\n\nexport const saveIllnessitem = (data) => (dispatch) => {\n    dispatch({\n        type: SET_ILLNESS_ITEM,\n        payload: data,\n    })\n\n    localStorage.setItem('illnessId', JSON.stringify(data))\n}\n\nexport const saveIllnessseverity = (data) => (dispatch) => {\n    dispatch({\n        type: SET_ILLNESS_SEVERITY,\n        payload: data,\n    })\n\n    localStorage.setItem('severityLevel', JSON.stringify(data))\n}\n\nexport const saveHospitalitem = (data) => (dispatch) => {\n    dispatch({\n        type: SET_HOSPITAL_ITEM,\n        payload: data,\n    })\n\n    localStorage.setItem('hospitalId', JSON.stringify(data))\n}\n\nexport const saveUserformInfo = (data) => (dispatch) => {\n    dispatch({\n        type: SET_USERFORM_INFO,\n        payload: data,\n    })\n\n    localStorage.setItem('userformInfo', JSON.stringify(data))\n}\n\nexport const saveUserInfotoDatabase = (userInfo) => async (dispatch) => {\n    try {\n        dispatch({type: SAVE_USERINFO_TO_DATABASE_REQUEST})\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n            }\n        }\n        const {data} = await axios.post(\n            'api/adduserinfo/',\n            userInfo,\n            config,\n        )\n \n        dispatch({\n            type:SAVE_USERINFO_TO_DATABASE_SUCCESS,\n            payload:data,\n        })\n    }catch(error) {\n        console.log(error)\n        dispatch({\n            type: SAVE_USERINFO_TO_DATABASE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n        \n    }\n\n}","import React from 'react'\nimport { Pagination } from 'react-bootstrap'\n\nfunction Paginate({ pages, page}) {\n    return (pages > 1 && (\n        <Pagination>\n            {[...Array(pages).keys()].map((x) => (\n\n                <Pagination.Item active={x + 1 === page}>{x + 1}</Pagination.Item>\n\n            ))}\n        </Pagination>\n    )\n    )\n}\n\nexport default Paginate\n","import React from 'react'\nimport { Spinner } from 'react-bootstrap'\n\nfunction Loader() {\n    return (\n        <Spinner\n            animation='border'\n            role='status'\n            style={{\n                height:'100px',\n                width:'100px',\n                margin:'auto',\n                display:'block',\n            }}\n        >\n            <span className='sr-only'>Loading...</span>    \n        </Spinner>\n    )\n}\n\nexport default Loader\n","import React from 'react'\nimport { Alert } from 'react-bootstrap'\n\nfunction Message({ variant, children }) {\n    return (\n        <Alert variant={variant}>\n            {children}\n        </Alert>\n    )\n}\n\nexport default Message\n","import React, { useState, useEffect } from 'react'\nimport {  Form, Button, ButtonGroup} from 'react-bootstrap'\n\nimport Hospital from '../components/Hospital'\nimport Paginate from '../components/Paginate'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listHospitals , listIllnesss, saveIllnessitem, saveIllnessseverity } from '../actions/appActions'\n\n\n\nfunction HomeScreen({history}) {\n    const dispatch = useDispatch()\n    const hospitalList = useSelector(state=>state.hospitalList)\n    const illnessList = useSelector(state=>state.illnessList)\n    const { error:illerror, loading:illloading, illnesses, page: illpage, pages:illpages} = illnessList\n    const { error:hoserror, loading:hosloading, hospitals, page:hospage, pages:hospages} = hospitalList\n\n    const [hospitaldisplay,setHospitaldisplay]=useState(false)\n\n    const [illnessId,setIllnessId]=useState(1);\n    const [severityId,setSeverityId]=useState(0);\n    const [illnessname, setIllnessname] = useState('Mortal Cold');\n    useEffect(() => {\n        dispatch(listIllnesss()) \n    }, [dispatch])\n\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        dispatch(saveIllnessitem(illnessId))\n        dispatch(saveIllnessseverity(severityId))\n        dispatch(listHospitals())\n        setHospitaldisplay(true)\n    }\n\n    const handleillnessChange=(e)=>{\n        e.preventDefault();\n        setIllnessId(e.target.value)\n        setIllnessname(illnesses[e.target.value-1].illness.name)\n        \n    }\n    const handleseverityChange =(e)=>{\n        e.preventDefault();\n        setSeverityId(e.target.value);\n        \n    }\n\n    useEffect(() => {\n        setHospitaldisplay(false)\n    }, [illnessId, severityId])\n\n    return (\n        <div>\n            <h1>Book Appointment</h1>\n            {illloading ? <Loader /> \n                : illerror ? <Message variant='danger'>{illerror}</Message>\n                    :\n                    \n                    <Form onSubmit={handleSubmit}>\n                        <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                            <Form.Label>What is your illness?</Form.Label>\n                            <Form.Control\n                            as=\"select\"\n                            name=\"illness\"\n                            onChange={handleillnessChange}\n                            value={illnessId}\n                            >\n                            {\n                                illnesses?.map((illness) => <option value={illness.illness.id} key={illness.illness.id}>{illness.illness.name}</option>)\n                \n                            }\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>What is the severity?</Form.Label>\n                            <br />\n                            <ButtonGroup aria-label=\"Basic example\" className=\" button-block\" name=\"severity\" value={severityId} onClick={handleseverityChange}>\n                                <Button variant=\"outline-secondary\" value={0}>🙂Level 0</Button>\n                                <Button variant=\"outline-secondary\" value={1}>😐Level 1</Button>\n                                <Button variant=\"outline-secondary\" value={2}>😖Level 2</Button>\n                                <Button variant=\"outline-secondary\" value={3}>😩Level 3</Button>\n                                <Button variant=\"outline-secondary\" value={4}>🤯Level 4</Button>\n                            </ButtonGroup>\n                            \n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\" >\n                            Submit\n                        </Button>\n                    </Form> \n            \n            }\n            <br />\n            {!hospitaldisplay ? ''\n            : hosloading ? <Loader /> \n                : hoserror ? <Message variant='danger'>{hoserror}</Message>\n                    :\n                    <Form>\n                        <Form.Label>Our Sugguested Hospitals (Illness: {illnessname}, Severity:{severityId})</Form.Label>\n                        {\n                            hospitals.map(hospital=>(\n                                <Hospital key={hospital.id} hospital={hospital} severity={severityId} history={history} />\n                            ))\n                        }            \n                        <Paginate page={hospage} pages={hospages}/>\n                    </Form>\n                \n            }\n\n        </div>\n    )\n}\n\nexport default HomeScreen\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Col, Form, Button} from 'react-bootstrap'\nimport { saveUserformInfo, saveUserInfotoDatabase } from '../actions/appActions'\n\nfunction UserInfoScreen({history}) {\n    const [firstname, setFirstname] = useState('')\n    const [lastname, setLastname] = useState('')\n    const [email, setEmail] = useState('')\n    const [address, setAddress] = useState('')\n    const [city, setCity] = useState('')\n    const [state, setState]= useState('')\n    const [zip, setZip]= useState('')\n    const illnessInfo = useSelector(state => state.illnessInfo) \n    const {illnessId, severityLevel, hospitalId} = illnessInfo\n    const dispatch= useDispatch()\n    const handleSubmit=(e)=>{\n        dispatch(saveUserInfotoDatabase({\n            firstname,\n            lastname,\n            email,\n            address,\n            city,\n            state,\n            zip,\n            illnessId,\n            severityLevel,\n            hospitalId\n        }))\n\n        dispatch(saveUserformInfo({\n            firstname,\n            lastname,\n            email,\n            address,\n            city,\n            state,\n            zip\n        }))\n        history.push('/submitresult')\n    }\n\n    return (\n        <div>\n            <Form onSubmit={handleSubmit}>\n                <h1>Please add your information</h1>\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"inlineFormInputName\">\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control \n                            type='type'\n                            placeholder='First Name'\n                            value={firstname}\n                            onChange={(e) => setFirstname(e.target.value)} />\n                    </Form.Group>\n                    <Form.Group as={Col} controlId=\"inlineFormInputName\">\n                        <Form.Label>Last Name</Form.Label>\n                        <Form.Control \n                            type=\"text\" \n                            placeholder=\"Last Name\"\n                            value={lastname}\n                            onChange={(e) => setLastname(e.target.value)} />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Group controlId=\"formGridEmail\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control \n                        type=\"email\" \n                        placeholder=\"Enter email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)} />\n                </Form.Group>\n             \n                <Form.Group controlId=\"formGridAddress1\">\n                    <Form.Label>Address</Form.Label>\n                    <Form.Control \n                        type='text'\n                        placeholder=\"1234 Main St\"\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)} />\n                </Form.Group>\n           \n  \n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"formGridCity\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control \n                            type='text'\n                            value={city}\n                            onChange={(e) => setCity(e.target.value)}\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridState\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control as=\"select\" \n                                    defaultValue=\"Choose...\" \n                                    onChange={(e) => setState(e.target.value)}>\n                            <option>Choose...</option>\n                            <option>New South Wales</option>\n                            <option>Victoria</option>\n                            <option>Queensland</option>\n                            <option>South Australia</option>\n                            <option>Western Australia</option>\n                            <option>Tasmania</option>\n                            <option>Northern Territory</option>\n                            <option>Australian Capital Territory</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridZip\">\n                        <Form.Label>Zip</Form.Label>\n                        <Form.Control \n                            type='number'\n                            value={zip}\n                            onChange={(e) => setZip(e.target.value)}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default UserInfoScreen\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Row, Col, Form, Button, ButtonGroup, ToggleButtonGroup} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction SubmitresultScreen({history}) {\n\n    const illnessInfo = useSelector(state=>state.illnessInfo)\n    const {loading, error}= illnessInfo\n    const handleClick=()=>{\n        history.push('/')\n    }\n\n    return (        \n        <div>\n            {loading ? <Loader /> \n                : error ? <Message variant='danger'>{error}</Message>\n                    : <Message >{'Submit success'}</Message>\n            }\n            {error ? <Button onClick={handleClick}>Try Again</Button> : <Button onClick={handleClick}>Book another</Button>}\n            \n        </div>\n    )\n}\n\nexport default SubmitresultScreen\n","import { Container } from 'react-bootstrap'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport HomeScreen from './screens/HomeScreen'\nimport UserInfoScreen from './screens/UserInfoScreen'\nimport SubmitresultScreen from './screens/SubmitresultScreen'\n\nfunction App() {\n  return (\n    <Router >\n      <Header />\n      <main className=\"py-3\">\n        <Container>\n          <Route path='/' component={HomeScreen} exact />\n          <Route path='/userInfoForm' component={UserInfoScreen} exact />\n          <Route path='/submitresult' component={SubmitresultScreen} exact />\n        </Container>\n        \n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n    }\n  };\n  \n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}