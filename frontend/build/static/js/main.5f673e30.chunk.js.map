{"version":3,"sources":["constants/appConstants.js","store.js","reducers/appReducers.js","components/Header.js","components/Footer.js","components/Illness.js","actions/appActions.js","components/Loader.js","components/Message.js","screens/HomeScreen.js","screens/UserInfoScreen.js","screens/SubmitresultScreen.js","screens/SeverityScreen.js","components/Hospital.js","screens/HospitalScreen.js","App.js","reportWebVitals.js","index.js"],"names":["HOSPITAL_LIST_REQUEST","HOSPITAL_LIST_SUCCESS","HOSPITAL_LIST_FAIL","ILLNESS_LIST_REQUEST","ILLNESS_LIST_SUCCESS","ILLNESS_LIST_FAIL","SET_ILLNESS_ITEM","SET_ILLNESS_SEVERITY","SET_HOSPITAL_ITEM","SET_USERFORM_INFO","SAVE_USERINFO_TO_DATABASE_REQUEST","SAVE_USERINFO_TO_DATABASE_SUCCESS","SAVE_USERINFO_TO_DATABASE_FAIL","reducer","combineReducers","hospitalList","state","hospitals","action","type","loading","payload","_embedded","error","illnessList","illnesses","illnessInfo","illnessItem","severityLevel","hospitalId","userformInfo","success","illnessItemFromStorage","localStorage","getItem","JSON","parse","hospitalIdFromStorage","initialState","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Header","Navbar","bg","variant","expand","Container","to","Brand","href","Footer","Row","Col","className","Illness","illness","history","dispatch","useDispatch","Card","Body","Title","as","name","xs","lg","Button","onClick","data","console","log","setItem","stringify","push","Loader","Spinner","animation","role","style","height","width","margin","display","Message","children","Alert","HomeScreen","useSelector","useEffect","a","axios","get","response","detail","message","Form","Label","map","id","UserInfoScreen","useState","firstname","setFirstname","lastname","setLastname","email","setEmail","address","setAddress","city","setCity","setState","zip","setZip","illnessId","onSubmit","e","userInfo","config","headers","post","Group","controlId","Control","required","placeholder","value","onChange","target","SubmitresultScreen","handleClick","SeverityScreen","ButtonGroup","aria-label","preventDefault","Hospital","hospital","severity","waititem","waitingList","waitingTime","patientCount","averageProcessTime","md","Text","HospitalScreen","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f673e30.chunk.js","sourcesContent":["export const HOSPITAL_LIST_REQUEST='HOSPITAL_LIST_REQUEST'\nexport const HOSPITAL_LIST_SUCCESS='HOSPITAL_LIST_SUCCESS'\nexport const HOSPITAL_LIST_FAIL='HOSPITAL_LIST_FAIL'\n\nexport const ILLNESS_LIST_REQUEST='ILLNESS_LIST_REQUEST'\nexport const ILLNESS_LIST_SUCCESS='ILLNESS_LIST_SUCCESS'\nexport const ILLNESS_LIST_FAIL='ILLNESS_LIST_FAIL'\nexport const SET_ILLNESS_ITEM='SET_ILLNESS_ITEM'\nexport const SET_ILLNESS_ID='SET_ILLNESS_ID'\nexport const SET_ILLNESS_NAME='SET_ILLNESS_NAME'\nexport const SET_ILLNESS_SEVERITY='SET_ILLNESS_SEVERITY'\nexport const SET_HOSPITAL_ITEM='SET_HOSPITAL_ITEM'\nexport const SET_USERFORM_INFO='SET_USERFORM_INFO'\n\nexport const SAVE_USERINFO_TO_DATABASE_REQUEST='SAVE_USERINFO_TO_DATABASE_REQUEST'\nexport const SAVE_USERINFO_TO_DATABASE_SUCCESS='SAVE_USERINFO_TO_DATABASE_SUCCESS'\nexport const SAVE_USERINFO_TO_DATABASE_FAIL='SAVE_USERINFO_TO_DATABASE_FAIL'","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { hospitalListReducer,illnessListReducer, illnessInfoReducer} from './reducers/appReducers'\n\n\nconst reducer =combineReducers({\n    hospitalList: hospitalListReducer,\n    illnessList: illnessListReducer,\n    illnessInfo: illnessInfoReducer\n})\n\nconst illnessItemFromStorage = localStorage.getItem('illnessItem') ?\n    JSON.parse(localStorage.getItem('illnessItem')) : 1\n\nconst hospitalIdFromStorage = localStorage.getItem('hospitalId') ?\n    JSON.parse(localStorage.getItem('hospitalId')) : 1\n\n\nconst severityLevelFromStorage = localStorage.getItem('severityLevel') ?\n    JSON.parse(localStorage.getItem('severityLevel')) : 0\n\nconst userformInfoFromStorage = localStorage.getItem('userformInfo') ?\n    JSON.parse(localStorage.getItem('userformInfo')) : {}\n\n\nconst initialState ={\n    illnessInfo: {\n        illnessItem: illnessItemFromStorage,\n        severityLevel: severityLevelFromStorage,\n        hospitalId: hospitalIdFromStorage,\n        userformInfo: userformInfoFromStorage,\n    }\n}\nconst middleware=[thunk]\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store","import {\n    HOSPITAL_LIST_REQUEST,\n    HOSPITAL_LIST_SUCCESS,\n    HOSPITAL_LIST_FAIL,\n    ILLNESS_LIST_REQUEST,\n    ILLNESS_LIST_SUCCESS,\n    ILLNESS_LIST_FAIL,\n    SET_ILLNESS_ITEM,\n    SET_ILLNESS_SEVERITY,\n    SET_HOSPITAL_ITEM,\n    SAVE_USERINFO_TO_DATABASE_FAIL,\n    SAVE_USERINFO_TO_DATABASE_REQUEST,\n    SAVE_USERINFO_TO_DATABASE_SUCCESS,\n    SET_USERFORM_INFO,\n\n} from '../constants/appConstants'\n\nexport const hospitalListReducer = (state={hospitals:[]},action) => {\n\n    switch(action.type) {\n        case HOSPITAL_LIST_REQUEST:\n            return {loading:true, hospitals: []}\n        case HOSPITAL_LIST_SUCCESS:\n            return {\n                loading:false, \n                hospitals: action.payload._embedded.hospitals, \n            }\n        case HOSPITAL_LIST_FAIL:\n            return { loading: false, error: action.payload }\n\n        default:\n            return state\n    }\n}\n\nexport const illnessListReducer = (state={illnesses:[]},action) => {\n\n    switch(action.type) {\n        case ILLNESS_LIST_REQUEST:\n            return {loading:true, illnesses: []}\n        case ILLNESS_LIST_SUCCESS:\n            return {\n                loading:false, \n                illnesses: action.payload._embedded.illnesses, \n            }\n        case ILLNESS_LIST_FAIL:\n            return { loading: false, error: action.payload }\n\n        default:\n            return state\n    }\n}\n\nexport const illnessInfoReducer =(state={ illnessItem:[],loading:false }, action) => {\n    switch (action.type) {\n        case SET_ILLNESS_ITEM:\n            return{\n                ...state,\n                illnessItem: action.payload\n            }\n        case SET_ILLNESS_SEVERITY:\n            return{\n                ...state,\n                severityLevel: action.payload\n            }\n        case SET_HOSPITAL_ITEM:\n            return{\n                ...state,\n                hospitalId: action.payload\n            }\n        case SET_USERFORM_INFO:\n            return{\n                ...state,\n                userformInfo: action.payload\n            }\n        case SAVE_USERINFO_TO_DATABASE_REQUEST:\n            return {\n                    loading:true\n            }\n        case SAVE_USERINFO_TO_DATABASE_SUCCESS:\n            return {\n                    loading: false,\n                    success: true,\n            \n            }\n        case SAVE_USERINFO_TO_DATABASE_FAIL:\n            return {\n                    loading: false,\n                    error: action.payload            \n            }\n        default:\n            return state\n    }\n}\n\n","import React from 'react'\nimport { Navbar, Container} from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\n\n\n\nfunction Header() {\n\n    return (\n        <header>\n           <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand href=\"/\">Hospital Appointment System</Navbar.Brand>\n                    </LinkContainer>\n                </Container>\n            </Navbar>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n\n\nfunction Footer() {\n    return (\n        <footer>\n            <Container>\n                <Row>\n                    <Col className =\"text-center py-3\"> Copyright &copy; JING\n                    </Col>\n                </Row>\n            </Container>\n        </footer>\n    )\n}\n\nexport default Footer\n","import React from 'react'\nimport { useDispatch} from 'react-redux'\nimport { Card ,Row, Col, Button } from 'react-bootstrap'\nimport { saveIllnessItem  } from '../actions/appActions'\n\n\nfunction Illness({ illness, history}) {\n\n    const dispatch = useDispatch()\n    const handleSubmit=()=>{\n        console.log(illness)\n        dispatch(saveIllnessItem(illness))\n        history.push('/severity')\n    }\n    return (\n        <Card className=\"my-3 p-3 rounded\">    \n            <Card.Body>\n                <Row className=\"justify-content-md-center\">\n                    <Col>\n                        <Card.Title as=\"div\">\n                            <strong>{illness.name}</strong>\n                        </Card.Title>\n                    </Col >\n                    \n                    <Col xs lg=\"2\">\n                        <Button onClick={handleSubmit}>Choose</Button>\n                    </Col>\n                </Row>\n        \n            </Card.Body>\n      \n        </Card>\n    )\n}\n\nexport default Illness\n","import axios from 'axios'\nimport {\n    HOSPITAL_LIST_REQUEST,\n    HOSPITAL_LIST_SUCCESS,\n    HOSPITAL_LIST_FAIL,\n    ILLNESS_LIST_REQUEST,\n    ILLNESS_LIST_SUCCESS,\n    ILLNESS_LIST_FAIL,\n    SET_ILLNESS_ITEM,\n    SET_ILLNESS_SEVERITY,\n    SET_HOSPITAL_ITEM,\n    SAVE_USERINFO_TO_DATABASE_FAIL,\n    SAVE_USERINFO_TO_DATABASE_REQUEST,\n    SAVE_USERINFO_TO_DATABASE_SUCCESS,\n    SET_USERFORM_INFO\n\n} from '../constants/appConstants'\n\nexport const listHospitals = () => async (dispatch) => {\n    try {\n        dispatch({type: HOSPITAL_LIST_REQUEST})\n        const {data} = await axios.get(`http://dmmw-api.australiaeast.cloudapp.azure.com:8080/hospitals`)\n        console.log(data)\n        dispatch({\n            type:HOSPITAL_LIST_SUCCESS,\n            payload:data,\n        })\n    }catch(error) {\n        dispatch({\n            type: HOSPITAL_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n        \n    }\n\n}\n\nexport const listIllnesss = () => async (dispatch) => {\n    try {\n        dispatch({type: ILLNESS_LIST_REQUEST})\n        const {data} = await axios.get('http://dmmw-api.australiaeast.cloudapp.azure.com:8080/illnesses')\n        console.log(data)\n        dispatch({\n            type:ILLNESS_LIST_SUCCESS,\n            payload:data,\n        })\n    }catch(error) {\n        console.log(error)\n        dispatch({\n            type: ILLNESS_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n        \n    }\n\n}\n\nexport const saveIllnessItem = (data) => (dispatch) => {\n    dispatch({\n        type: SET_ILLNESS_ITEM,\n        payload: data,\n    })\n\n    localStorage.setItem('illnessItem', JSON.stringify(data))\n}\n\n\n\nexport const saveIllnessseverity = (data) => (dispatch) => {\n    dispatch({\n        type: SET_ILLNESS_SEVERITY,\n        payload: data,\n    })\n\n    localStorage.setItem('severityLevel', JSON.stringify(data))\n}\n\nexport const saveHospitalitem = (data) => (dispatch) => {\n    dispatch({\n        type: SET_HOSPITAL_ITEM,\n        payload: data,\n    })\n\n    localStorage.setItem('hospitalId', JSON.stringify(data))\n}\n\nexport const saveUserformInfo = (data) => (dispatch) => {\n    dispatch({\n        type: SET_USERFORM_INFO,\n        payload: data,\n    })\n\n    localStorage.setItem('userformInfo', JSON.stringify(data))\n}\n\nexport const saveUserInfotoDatabase = (userInfo) => async (dispatch) => {\n    try {\n        dispatch({type: SAVE_USERINFO_TO_DATABASE_REQUEST})\n        const config = {\n            headers: {\n                'Content-type': 'application/json',\n            }\n        }\n        const {data} = await axios.post(\n            'api/adduserinfo/',\n            userInfo,\n            config,\n        )\n \n        dispatch({\n            type:SAVE_USERINFO_TO_DATABASE_SUCCESS,\n            payload:data,\n        })\n    }catch(error) {\n        console.log(error)\n        dispatch({\n            type: SAVE_USERINFO_TO_DATABASE_FAIL,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message,\n        })\n        \n    }\n\n}","import React from 'react'\nimport { Spinner } from 'react-bootstrap'\n\nfunction Loader() {\n    return (\n        <Spinner\n            animation='border'\n            role='status'\n            style={{\n                height:'100px',\n                width:'100px',\n                margin:'auto',\n                display:'block',\n            }}\n        >\n            <span className='sr-only'>Loading...</span>    \n        </Spinner>\n    )\n}\n\nexport default Loader\n","import React from 'react'\nimport { Alert } from 'react-bootstrap'\n\nfunction Message({ variant, children }) {\n    return (\n        <Alert variant={variant}>\n            {children}\n        </Alert>\n    )\n}\n\nexport default Message\n","import React, { useEffect } from 'react'\nimport { Form} from 'react-bootstrap'\nimport Illness from '../components/Illness'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { listIllnesss } from '../actions/appActions'\n\n\n\nfunction HomeScreen({history}) {\n    const dispatch = useDispatch()\n    const illnessList = useSelector(state=>state.illnessList)\n    const { error, loading, illnesses} = illnessList\n\n    useEffect(() => {\n        dispatch(listIllnesss()) \n    }, [dispatch])\n\n    return (\n        <div>\n            <h1>Book An Appointment</h1>\n            {loading ? <Loader /> \n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <Form>\n                        <Form.Label><h2>What is your illness?</h2></Form.Label>\n                        {\n                            illnesses.map(illness=>(\n                                <Illness key={illness.illness.id} illness={illness.illness} history={history} />\n                            ))\n                        }            \n                    </Form>\n            \n            }\n           \n        </div>\n    )\n}\n\nexport default HomeScreen\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Col, Form, Button} from 'react-bootstrap'\nimport { saveUserformInfo, saveUserInfotoDatabase } from '../actions/appActions'\n\nfunction UserInfoScreen({history}) {\n    const [firstname, setFirstname] = useState('')\n    const [lastname, setLastname] = useState('')\n    const [email, setEmail] = useState('')\n    const [address, setAddress] = useState('')\n    const [city, setCity] = useState('')\n    const [state, setState]= useState('')\n    const [zip, setZip]= useState('')\n    const illnessInfo = useSelector(state => state.illnessInfo) \n    const {illnessItem, severityLevel, hospitalId} = illnessInfo\n    const illnessId=illnessItem.id\n    const dispatch= useDispatch()\n    const handleSubmit=(e)=>{\n        dispatch(saveUserInfotoDatabase({\n            firstname,\n            lastname,\n            email,\n            address,\n            city,\n            state,\n            zip,\n            illnessId,\n            severityLevel,\n            hospitalId\n        }))\n\n        dispatch(saveUserformInfo({\n            firstname,\n            lastname,\n            email,\n            address,\n            city,\n            state,\n            zip\n        }))\n        history.push('/submitresult')\n    }\n\n    return (\n        <div>\n            <Form onSubmit={handleSubmit}>\n                <h1>Please add your information</h1>\n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"inlineFormInputName\">\n                        <Form.Label>First Name</Form.Label>\n                        <Form.Control \n                            type='text'\n                            required=\"required\" \n                            placeholder='First Name'\n                            value={firstname}\n                            onChange={(e) => setFirstname(e.target.value)} />\n                    </Form.Group>\n                    <Form.Group as={Col} controlId=\"inlineFormInputName\">\n                        <Form.Label>Last Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            required=\"required\" \n                            placeholder=\"Last Name\"\n                            value={lastname}\n                            onChange={(e) => setLastname(e.target.value)} />\n                    </Form.Group>\n                </Form.Row>\n\n                <Form.Group controlId=\"formGridEmail\">\n                    <Form.Label>Email</Form.Label>\n                    <Form.Control \n                        type=\"email\" \n                        required=\"required\" \n                        placeholder=\"Enter email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)} />\n                </Form.Group>\n             \n                <Form.Group controlId=\"formGridAddress1\">\n                    <Form.Label>Address</Form.Label>\n                    <Form.Control \n                        type='text'\n                        required=\"required\" \n                        placeholder=\"1234 Main St\"\n                        value={address}\n                        onChange={(e) => setAddress(e.target.value)} />\n                </Form.Group>\n           \n  \n                <Form.Row>\n                    <Form.Group as={Col} controlId=\"formGridCity\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control \n                            type='text'\n                            required=\"required\" \n                            value={city}\n                            onChange={(e) => setCity(e.target.value)}\n                        />\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridState\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control as=\"select\"\n                                    required=\"required\" \n                                    onChange={(e) => setState(e.target.value)}>\n                            <option>Choose...</option>\n                            <option>New South Wales</option>\n                            <option>Victoria</option>\n                            <option>Queensland</option>\n                            <option>South Australia</option>\n                            <option>Western Australia</option>\n                            <option>Tasmania</option>\n                            <option>Northern Territory</option>\n                            <option>Australian Capital Territory</option>\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group as={Col} controlId=\"formGridZip\">\n                        <Form.Label>Zip</Form.Label>\n                        <Form.Control \n                            type='number'\n                            required=\"required\" \n                            value={zip}\n                            onChange={(e) => setZip(e.target.value)}\n                        />\n                    </Form.Group>\n                </Form.Row>\n\n                <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                </Button>\n            </Form>\n        </div>\n    )\n}\n\nexport default UserInfoScreen\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Button, ButtonGroup} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\nfunction SubmitresultScreen({history}) {\n\n    const illnessInfo = useSelector(state=>state.illnessInfo)\n    const {loading, error}= illnessInfo\n    const handleClick=()=>{\n        history.push('/')\n    }\n\n    return (        \n        <div>\n            {loading ? <Loader /> \n                : error ? <Message variant='danger'>{error}</Message>\n                    : <Message >{'Your appointment has been submitted successfully !'}</Message>\n            }\n            {error ? <Button onClick={handleClick}>Try Again</Button> : <Button onClick={handleClick}>Book another</Button>}\n            \n        </div>\n    )\n}\n\nexport default SubmitresultScreen\n","import React from 'react'\nimport { Button, ButtonGroup} from 'react-bootstrap'\nimport { saveIllnessseverity,listHospitals} from '../actions/appActions'\nimport { useDispatch } from 'react-redux'\n\nfunction SeverityScreen({history}) {\n\n    const dispatch= useDispatch()\n    const handleClick=(e)=>{\n        e.preventDefault()\n        dispatch(saveIllnessseverity(e.target.value))\n        dispatch(listHospitals())\n        history.push('./hospitals')\n    }\n    return (\n        <div>\n           \n            <h2>What is the severity?</h2>            \n                <ButtonGroup \n                    aria-label=\"Basic example\" \n                    className=\" button-block\" \n                    name=\"severity\" \n                    onClick={handleClick}             \n                >\n                    <Button variant=\"outline-secondary\" value={0}>🙂Level 0</Button>\n                    <Button variant=\"outline-secondary\" value={1}>😐Level 1</Button>\n                    <Button variant=\"outline-secondary\" value={2}>😖Level 2</Button>\n                    <Button variant=\"outline-secondary\" value={3}>😩Level 3</Button>\n                    <Button variant=\"outline-secondary\" value={4}>🤯Level 4</Button>\n                </ButtonGroup>\n                \n        </div>\n    )\n}\n\nexport default SeverityScreen\n","import React from 'react'\nimport { useDispatch} from 'react-redux'\nimport { Card ,Row, Col, Button } from 'react-bootstrap'\nimport { saveHospitalitem  } from '../actions/appActions'\n\n\nfunction Hospital({ hospital, severity, history}) {\n    console.log(severity)\n    const waititem=hospital.waitingList[severity]\n    const patientCount=waititem.patientCount\n    const averageProcessTime=waititem.averageProcessTime\n    const waitingTime=patientCount*averageProcessTime\n    const dispatch = useDispatch()\n    const handleSubmit=()=>{\n        console.log('handsubmit')\n        dispatch(saveHospitalitem(hospital.id))\n        history.push('/userInfoForm')\n    }\n    return (\n        <Card className=\"my-3 p-3 rounded\">    \n            <Card.Body>\n                <Row className=\"justify-content-md-center\">\n                    <Col>\n                        <Card.Title as=\"div\">\n                            <strong>{hospital.name}</strong>\n                        </Card.Title>\n                    </Col >\n                    <Col md=\"auto\" >\n                        <Card.Text  as=\"div\" >\n                           <p>Wait time: {waitingTime} mins</p>      \n                        </Card.Text>\n                    </Col>\n                    <Col xs lg=\"2\">\n                        <Button onClick={handleSubmit}>Choose</Button>\n                    </Col>\n                </Row>\n        \n            </Card.Body>\n      \n        </Card>\n    )\n}\n\nexport default Hospital\n","import React from 'react'\nimport { Form} from 'react-bootstrap'\nimport { useSelector } from 'react-redux'\nimport Hospital from '../components/Hospital'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\n\n\nfunction HospitalScreen({history}) {\n\n    const hospitalList = useSelector(state=>state.hospitalList)\n    const illness= useSelector(state=>state.illnessInfo)\n    const {illnessItem, severityLevel} =illness\n    const { error, loading, hospitals} = hospitalList\n\n    return (\n        <div>\n            { loading ? <Loader /> \n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <Form>\n                        <Form.Label><h2>Our Sugguested Hospitals (Illness: {illnessItem.name}, Severity:{severityLevel})</h2></Form.Label>\n                        {\n                            hospitals.map(hospital=>(\n                                <Hospital key={hospital.id} hospital={hospital} severity={severityLevel} history={history} />\n                            ))\n                        }\n                    </Form>\n\n            }\n            \n        </div>\n    )\n}\n\nexport default HospitalScreen\n","import { Container } from 'react-bootstrap'\nimport { HashRouter as Router, Route } from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport HomeScreen from './screens/HomeScreen'\nimport UserInfoScreen from './screens/UserInfoScreen'\nimport SubmitresultScreen from './screens/SubmitresultScreen'\nimport SeverityScreen from './screens/SeverityScreen'\nimport HospitalScreen from './screens/HospitalScreen'\n\nfunction App() {\n  return (\n    <Router >\n      <Header />\n      <main className=\"py-3\">\n        <Container>\n          <Route path='/' component={HomeScreen} exact />\n          <Route path='/severity' component={SeverityScreen} exact />\n          <Route path='/hospitals' component={HospitalScreen} exact />\n          <Route path='/userInfoForm' component={UserInfoScreen} exact />\n          <Route path='/submitresult' component={SubmitresultScreen} exact />\n        </Container>\n        \n      </main>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      });\n    }\n  };\n  \n  export default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store} >\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}